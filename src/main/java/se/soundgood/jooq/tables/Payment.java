/*
 * This file is generated by jOOQ.
 */
package se.soundgood.jooq.tables;


import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import se.soundgood.jooq.DefaultSchema;
import se.soundgood.jooq.Keys;
import se.soundgood.jooq.tables.records.PaymentRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Payment extends TableImpl<PaymentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>payment</code>
     */
    public static final Payment PAYMENT = new Payment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PaymentRecord> getRecordType() {
        return PaymentRecord.class;
    }

    /**
     * The column <code>payment.payment_id</code>.
     */
    public final TableField<PaymentRecord, Long> PAYMENT_ID = createField(DSL.name("payment_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>payment.payment_description_id</code>.
     */
    public final TableField<PaymentRecord, Long> PAYMENT_DESCRIPTION_ID = createField(DSL.name("payment_description_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>payment.from_date</code>.
     */
    public final TableField<PaymentRecord, LocalDate> FROM_DATE = createField(DSL.name("from_date"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>payment.to_date</code>.
     */
    public final TableField<PaymentRecord, LocalDate> TO_DATE = createField(DSL.name("to_date"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>payment.instructor_pay</code>.
     */
    public final TableField<PaymentRecord, Integer> INSTRUCTOR_PAY = createField(DSL.name("instructor_pay"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>payment.student_price</code>.
     */
    public final TableField<PaymentRecord, Integer> STUDENT_PRICE = createField(DSL.name("student_price"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>payment.sibling_discount</code>.
     */
    public final TableField<PaymentRecord, BigDecimal> SIBLING_DISCOUNT = createField(DSL.name("sibling_discount"), SQLDataType.NUMERIC(10, 7).nullable(false), this, "");

    private Payment(Name alias, Table<PaymentRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Payment(Name alias, Table<PaymentRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>payment</code> table reference
     */
    public Payment(String alias) {
        this(DSL.name(alias), PAYMENT);
    }

    /**
     * Create an aliased <code>payment</code> table reference
     */
    public Payment(Name alias) {
        this(alias, PAYMENT);
    }

    /**
     * Create a <code>payment</code> table reference
     */
    public Payment() {
        this(DSL.name("payment"), null);
    }

    public <O extends Record> Payment(Table<O> path, ForeignKey<O, PaymentRecord> childPath, InverseForeignKey<O, PaymentRecord> parentPath) {
        super(path, childPath, parentPath, PAYMENT);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class PaymentPath extends Payment implements Path<PaymentRecord> {
        public <O extends Record> PaymentPath(Table<O> path, ForeignKey<O, PaymentRecord> childPath, InverseForeignKey<O, PaymentRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private PaymentPath(Name alias, Table<PaymentRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public PaymentPath as(String alias) {
            return new PaymentPath(DSL.name(alias), this);
        }

        @Override
        public PaymentPath as(Name alias) {
            return new PaymentPath(alias, this);
        }

        @Override
        public PaymentPath as(Table<?> alias) {
            return new PaymentPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<PaymentRecord, Long> getIdentity() {
        return (Identity<PaymentRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<PaymentRecord> getPrimaryKey() {
        return Keys.PAYMENT_PKEY;
    }

    @Override
    public List<ForeignKey<PaymentRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PAYMENT__PAYMENT_PAYMENT_DESCRIPTION_ID_FKEY);
    }

    private transient PaymentDescription.PaymentDescriptionPath _paymentDescription;

    /**
     * Get the implicit join path to the <code>public.payment_description</code>
     * table.
     */
    public PaymentDescription.PaymentDescriptionPath paymentDescription() {
        if (_paymentDescription == null)
            _paymentDescription = new PaymentDescription.PaymentDescriptionPath(this, Keys.PAYMENT__PAYMENT_PAYMENT_DESCRIPTION_ID_FKEY, null);

        return _paymentDescription;
    }

    private transient TimeSlot.TimeSlotPath _timeSlot;

    /**
     * Get the implicit to-many join path to the <code>public.time_slot</code>
     * table
     */
    public TimeSlot.TimeSlotPath timeSlot() {
        if (_timeSlot == null)
            _timeSlot = new TimeSlot.TimeSlotPath(this, null, Keys.TIME_SLOT__TIME_SLOT_PAYMENT_ID_FKEY.getInverseKey());

        return _timeSlot;
    }

    @Override
    public Payment as(String alias) {
        return new Payment(DSL.name(alias), this);
    }

    @Override
    public Payment as(Name alias) {
        return new Payment(alias, this);
    }

    @Override
    public Payment as(Table<?> alias) {
        return new Payment(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Payment rename(String name) {
        return new Payment(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Payment rename(Name name) {
        return new Payment(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Payment rename(Table<?> name) {
        return new Payment(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Payment where(Condition condition) {
        return new Payment(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Payment where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Payment where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Payment where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Payment where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Payment where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Payment where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Payment where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Payment whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Payment whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
