/*
 * This file is generated by jOOQ.
 */
package se.soundgood.jooq.tables;


import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import se.soundgood.jooq.DefaultSchema;
import se.soundgood.jooq.Keys;
import se.soundgood.jooq.enums.Instype;
import se.soundgood.jooq.tables.Instrument.InstrumentPath;
import se.soundgood.jooq.tables.records.InstrumentSpecificationRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class InstrumentSpecification extends TableImpl<InstrumentSpecificationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>instrument_specification</code>
     */
    public static final InstrumentSpecification INSTRUMENT_SPECIFICATION = new InstrumentSpecification();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<InstrumentSpecificationRecord> getRecordType() {
        return InstrumentSpecificationRecord.class;
    }

    /**
     * The column
     * <code>instrument_specification.instrument_specification_id</code>.
     */
    public final TableField<InstrumentSpecificationRecord, Long> INSTRUMENT_SPECIFICATION_ID = createField(DSL.name("instrument_specification_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>instrument_specification.type</code>.
     */
    public final TableField<InstrumentSpecificationRecord, Instype> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(Instype.class), this, "");

    /**
     * The column <code>instrument_specification.brand</code>.
     */
    public final TableField<InstrumentSpecificationRecord, String> BRAND = createField(DSL.name("brand"), SQLDataType.VARCHAR(100), this, "");

    private InstrumentSpecification(Name alias, Table<InstrumentSpecificationRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private InstrumentSpecification(Name alias, Table<InstrumentSpecificationRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>instrument_specification</code> table reference
     */
    public InstrumentSpecification(String alias) {
        this(DSL.name(alias), INSTRUMENT_SPECIFICATION);
    }

    /**
     * Create an aliased <code>instrument_specification</code> table reference
     */
    public InstrumentSpecification(Name alias) {
        this(alias, INSTRUMENT_SPECIFICATION);
    }

    /**
     * Create a <code>instrument_specification</code> table reference
     */
    public InstrumentSpecification() {
        this(DSL.name("instrument_specification"), null);
    }

    public <O extends Record> InstrumentSpecification(Table<O> path, ForeignKey<O, InstrumentSpecificationRecord> childPath, InverseForeignKey<O, InstrumentSpecificationRecord> parentPath) {
        super(path, childPath, parentPath, INSTRUMENT_SPECIFICATION);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class InstrumentSpecificationPath extends InstrumentSpecification implements Path<InstrumentSpecificationRecord> {
        public <O extends Record> InstrumentSpecificationPath(Table<O> path, ForeignKey<O, InstrumentSpecificationRecord> childPath, InverseForeignKey<O, InstrumentSpecificationRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private InstrumentSpecificationPath(Name alias, Table<InstrumentSpecificationRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public InstrumentSpecificationPath as(String alias) {
            return new InstrumentSpecificationPath(DSL.name(alias), this);
        }

        @Override
        public InstrumentSpecificationPath as(Name alias) {
            return new InstrumentSpecificationPath(alias, this);
        }

        @Override
        public InstrumentSpecificationPath as(Table<?> alias) {
            return new InstrumentSpecificationPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<InstrumentSpecificationRecord, Long> getIdentity() {
        return (Identity<InstrumentSpecificationRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<InstrumentSpecificationRecord> getPrimaryKey() {
        return Keys.INSTRUMENT_SPECIFICATION_PKEY;
    }

    private transient InstrumentPath _instrument;

    /**
     * Get the implicit to-many join path to the <code>public.instrument</code>
     * table
     */
    public InstrumentPath instrument() {
        if (_instrument == null)
            _instrument = new InstrumentPath(this, null, Keys.INSTRUMENT__INSTRUMENT_INSTRUMENT_SPECIFICATION_ID_FKEY.getInverseKey());

        return _instrument;
    }

    @Override
    public InstrumentSpecification as(String alias) {
        return new InstrumentSpecification(DSL.name(alias), this);
    }

    @Override
    public InstrumentSpecification as(Name alias) {
        return new InstrumentSpecification(alias, this);
    }

    @Override
    public InstrumentSpecification as(Table<?> alias) {
        return new InstrumentSpecification(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public InstrumentSpecification rename(String name) {
        return new InstrumentSpecification(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public InstrumentSpecification rename(Name name) {
        return new InstrumentSpecification(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public InstrumentSpecification rename(Table<?> name) {
        return new InstrumentSpecification(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public InstrumentSpecification where(Condition condition) {
        return new InstrumentSpecification(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public InstrumentSpecification where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public InstrumentSpecification where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public InstrumentSpecification where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public InstrumentSpecification where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public InstrumentSpecification where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public InstrumentSpecification where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public InstrumentSpecification where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public InstrumentSpecification whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public InstrumentSpecification whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
