/*
 * This file is generated by jOOQ.
 */
package se.soundgood.jooq.tables;


import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.YearToSecond;

import se.soundgood.jooq.DefaultSchema;
import se.soundgood.jooq.Keys;
import se.soundgood.jooq.enums.Settings;
import se.soundgood.jooq.tables.records.DbSettingsRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DbSettings extends TableImpl<DbSettingsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>db_settings</code>
     */
    public static final DbSettings DB_SETTINGS = new DbSettings();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DbSettingsRecord> getRecordType() {
        return DbSettingsRecord.class;
    }

    /**
     * The column <code>db_settings.id</code>.
     */
    public final TableField<DbSettingsRecord, Settings> ID = createField(DSL.name("id"), SQLDataType.VARCHAR.nullable(false).defaultValue(DSL.field(DSL.raw("'SETTINGS'::settings"), SQLDataType.VARCHAR)).asEnumDataType(Settings.class), this, "");

    /**
     * The column <code>db_settings.max_lease_count</code>.
     */
    public final TableField<DbSettingsRecord, Integer> MAX_LEASE_COUNT = createField(DSL.name("max_lease_count"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("2"), SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>db_settings.max_rent_period</code>.
     */
    public final TableField<DbSettingsRecord, YearToSecond> MAX_RENT_PERIOD = createField(DSL.name("max_rent_period"), SQLDataType.INTERVAL.nullable(false).defaultValue(DSL.field(DSL.raw("'1 year'::interval"), SQLDataType.INTERVAL)), this, "");

    private DbSettings(Name alias, Table<DbSettingsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private DbSettings(Name alias, Table<DbSettingsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>db_settings</code> table reference
     */
    public DbSettings(String alias) {
        this(DSL.name(alias), DB_SETTINGS);
    }

    /**
     * Create an aliased <code>db_settings</code> table reference
     */
    public DbSettings(Name alias) {
        this(alias, DB_SETTINGS);
    }

    /**
     * Create a <code>db_settings</code> table reference
     */
    public DbSettings() {
        this(DSL.name("db_settings"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<DbSettingsRecord> getPrimaryKey() {
        return Keys.DB_SETTINGS_PKEY;
    }

    @Override
    public DbSettings as(String alias) {
        return new DbSettings(DSL.name(alias), this);
    }

    @Override
    public DbSettings as(Name alias) {
        return new DbSettings(alias, this);
    }

    @Override
    public DbSettings as(Table<?> alias) {
        return new DbSettings(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public DbSettings rename(String name) {
        return new DbSettings(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DbSettings rename(Name name) {
        return new DbSettings(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public DbSettings rename(Table<?> name) {
        return new DbSettings(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DbSettings where(Condition condition) {
        return new DbSettings(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DbSettings where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DbSettings where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DbSettings where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DbSettings where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DbSettings where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DbSettings where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DbSettings where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DbSettings whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DbSettings whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
