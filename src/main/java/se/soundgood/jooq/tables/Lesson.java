/*
 * This file is generated by jOOQ.
 */
package se.soundgood.jooq.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import se.soundgood.jooq.DefaultSchema;
import se.soundgood.jooq.Keys;
import se.soundgood.jooq.enums.Instype;
import se.soundgood.jooq.enums.Lesstype;
import se.soundgood.jooq.enums.Mgenre;
import se.soundgood.jooq.tables.records.LessonRecord;
import se.soundgood.jooq.enums.Skill;
import se.soundgood.jooq.tables.Enrollment.EnrollmentPath;
import se.soundgood.jooq.tables.Instructor.InstructorPath;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Lesson extends TableImpl<LessonRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>lesson</code>
     */
    public static final Lesson LESSON = new Lesson();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LessonRecord> getRecordType() {
        return LessonRecord.class;
    }

    /**
     * The column <code>lesson.lesson_id</code>.
     */
    public final TableField<LessonRecord, Long> LESSON_ID = createField(DSL.name("lesson_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>lesson.instructor_id</code>.
     */
    public final TableField<LessonRecord, Long> INSTRUCTOR_ID = createField(DSL.name("instructor_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>lesson.lesson_type</code>.
     */
    public final TableField<LessonRecord, Lesstype> LESSON_TYPE = createField(DSL.name("lesson_type"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(Lesstype.class), this, "");

    /**
     * The column <code>lesson.skill_level</code>.
     */
    public final TableField<LessonRecord, Skill> SKILL_LEVEL = createField(DSL.name("skill_level"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(Skill.class), this, "");

    /**
     * The column <code>lesson.min_students</code>.
     */
    public final TableField<LessonRecord, Integer> MIN_STUDENTS = createField(DSL.name("min_students"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>lesson.max_students</code>.
     */
    public final TableField<LessonRecord, Integer> MAX_STUDENTS = createField(DSL.name("max_students"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>lesson.instrument_type</code>.
     */
    public final TableField<LessonRecord, Instype> INSTRUMENT_TYPE = createField(DSL.name("instrument_type"), SQLDataType.VARCHAR.asEnumDataType(Instype.class), this, "");

    /**
     * The column <code>lesson.music_genre</code>.
     */
    public final TableField<LessonRecord, Mgenre> MUSIC_GENRE = createField(DSL.name("music_genre"), SQLDataType.VARCHAR.asEnumDataType(Mgenre.class), this, "");

    /**
     * The column <code>lesson.payment_description_id</code>.
     */
    public final TableField<LessonRecord, Long> PAYMENT_DESCRIPTION_ID = createField(DSL.name("payment_description_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private Lesson(Name alias, Table<LessonRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Lesson(Name alias, Table<LessonRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>lesson</code> table reference
     */
    public Lesson(String alias) {
        this(DSL.name(alias), LESSON);
    }

    /**
     * Create an aliased <code>lesson</code> table reference
     */
    public Lesson(Name alias) {
        this(alias, LESSON);
    }

    /**
     * Create a <code>lesson</code> table reference
     */
    public Lesson() {
        this(DSL.name("lesson"), null);
    }

    public <O extends Record> Lesson(Table<O> path, ForeignKey<O, LessonRecord> childPath, InverseForeignKey<O, LessonRecord> parentPath) {
        super(path, childPath, parentPath, LESSON);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class LessonPath extends Lesson implements Path<LessonRecord> {
        public <O extends Record> LessonPath(Table<O> path, ForeignKey<O, LessonRecord> childPath, InverseForeignKey<O, LessonRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private LessonPath(Name alias, Table<LessonRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public LessonPath as(String alias) {
            return new LessonPath(DSL.name(alias), this);
        }

        @Override
        public LessonPath as(Name alias) {
            return new LessonPath(alias, this);
        }

        @Override
        public LessonPath as(Table<?> alias) {
            return new LessonPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<LessonRecord, Long> getIdentity() {
        return (Identity<LessonRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<LessonRecord> getPrimaryKey() {
        return Keys.LESSON_PKEY;
    }

    @Override
    public List<ForeignKey<LessonRecord, ?>> getReferences() {
        return Arrays.asList(Keys.LESSON__LESSON_INSTRUCTOR_ID_FKEY, Keys.LESSON__LESSON_PAYMENT_DESCRIPTION_ID_FKEY);
    }

    private transient InstructorPath _instructor;

    /**
     * Get the implicit join path to the <code>public.instructor</code> table.
     */
    public InstructorPath instructor() {
        if (_instructor == null)
            _instructor = new InstructorPath(this, Keys.LESSON__LESSON_INSTRUCTOR_ID_FKEY, null);

        return _instructor;
    }

    private transient PaymentDescription.PaymentDescriptionPath _paymentDescription;

    /**
     * Get the implicit join path to the <code>public.payment_description</code>
     * table.
     */
    public PaymentDescription.PaymentDescriptionPath paymentDescription() {
        if (_paymentDescription == null)
            _paymentDescription = new PaymentDescription.PaymentDescriptionPath(this, Keys.LESSON__LESSON_PAYMENT_DESCRIPTION_ID_FKEY, null);

        return _paymentDescription;
    }

    private transient EnrollmentPath _enrollment;

    /**
     * Get the implicit to-many join path to the <code>public.enrollment</code>
     * table
     */
    public EnrollmentPath enrollment() {
        if (_enrollment == null)
            _enrollment = new EnrollmentPath(this, null, Keys.ENROLLMENT__ENROLLMENT_LESSON_ID_FKEY.getInverseKey());

        return _enrollment;
    }

    private transient TimeSlot.TimeSlotPath _timeSlot;

    /**
     * Get the implicit to-many join path to the <code>public.time_slot</code>
     * table
     */
    public TimeSlot.TimeSlotPath timeSlot() {
        if (_timeSlot == null)
            _timeSlot = new TimeSlot.TimeSlotPath(this, null, Keys.TIME_SLOT__TIME_SLOT_LESSON_ID_FKEY.getInverseKey());

        return _timeSlot;
    }

    /**
     * Get the implicit many-to-many join path to the
     * <code>public.student</code> table
     */
    public Student.StudentPath student() {
        return enrollment().student();
    }

    @Override
    public Lesson as(String alias) {
        return new Lesson(DSL.name(alias), this);
    }

    @Override
    public Lesson as(Name alias) {
        return new Lesson(alias, this);
    }

    @Override
    public Lesson as(Table<?> alias) {
        return new Lesson(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Lesson rename(String name) {
        return new Lesson(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Lesson rename(Name name) {
        return new Lesson(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Lesson rename(Table<?> name) {
        return new Lesson(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Lesson where(Condition condition) {
        return new Lesson(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Lesson where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Lesson where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Lesson where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Lesson where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Lesson where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Lesson where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Lesson where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Lesson whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Lesson whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
