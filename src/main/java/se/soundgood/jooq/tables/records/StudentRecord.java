/*
 * This file is generated by jOOQ.
 */
package se.soundgood.jooq.tables.records;


import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;

import se.soundgood.jooq.tables.Student;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StudentRecord extends UpdatableRecordImpl<StudentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>student.student_id</code>.
     */
    public StudentRecord setStudentId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>student.student_id</code>.
     */
    public Long getStudentId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>student.family_id</code>.
     */
    public StudentRecord setFamilyId(Long value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>student.family_id</code>.
     */
    public Long getFamilyId() {
        return (Long) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached StudentRecord
     */
    public StudentRecord() {
        super(Student.STUDENT);
    }

    /**
     * Create a detached, initialised StudentRecord
     */
    public StudentRecord(Long studentId, Long familyId) {
        super(Student.STUDENT);

        setStudentId(studentId);
        setFamilyId(familyId);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised StudentRecord
     */
    public StudentRecord(se.soundgood.jooq.tables.pojos.Student value) {
        super(Student.STUDENT);

        if (value != null) {
            setStudentId(value.studentId());
            setFamilyId(value.familyId());
            resetChangedOnNotNull();
        }
    }
}
