/*
 * This file is generated by jOOQ.
 */
package se.soundgood.jooq.tables;


import java.time.LocalDate;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import se.soundgood.jooq.DefaultSchema;
import se.soundgood.jooq.Keys;
import se.soundgood.jooq.tables.records.LeaseRecord;
import se.soundgood.jooq.tables.Instrument.InstrumentPath;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Lease extends TableImpl<LeaseRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>lease</code>
     */
    public static final Lease LEASE = new Lease();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LeaseRecord> getRecordType() {
        return LeaseRecord.class;
    }

    /**
     * The column <code>lease.lease_id</code>.
     */
    public final TableField<LeaseRecord, Long> LEASE_ID = createField(DSL.name("lease_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>lease.rent_date</code>.
     */
    public final TableField<LeaseRecord, LocalDate> RENT_DATE = createField(DSL.name("rent_date"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>lease.return_date</code>.
     */
    public final TableField<LeaseRecord, LocalDate> RETURN_DATE = createField(DSL.name("return_date"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>lease.instrument_id</code>.
     */
    public final TableField<LeaseRecord, Long> INSTRUMENT_ID = createField(DSL.name("instrument_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>lease.student_id</code>.
     */
    public final TableField<LeaseRecord, Long> STUDENT_ID = createField(DSL.name("student_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>lease.rent_price_id</code>.
     */
    public final TableField<LeaseRecord, Long> RENT_PRICE_ID = createField(DSL.name("rent_price_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private Lease(Name alias, Table<LeaseRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Lease(Name alias, Table<LeaseRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>lease</code> table reference
     */
    public Lease(String alias) {
        this(DSL.name(alias), LEASE);
    }

    /**
     * Create an aliased <code>lease</code> table reference
     */
    public Lease(Name alias) {
        this(alias, LEASE);
    }

    /**
     * Create a <code>lease</code> table reference
     */
    public Lease() {
        this(DSL.name("lease"), null);
    }

    public <O extends Record> Lease(Table<O> path, ForeignKey<O, LeaseRecord> childPath, InverseForeignKey<O, LeaseRecord> parentPath) {
        super(path, childPath, parentPath, LEASE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class LeasePath extends Lease implements Path<LeaseRecord> {
        public <O extends Record> LeasePath(Table<O> path, ForeignKey<O, LeaseRecord> childPath, InverseForeignKey<O, LeaseRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private LeasePath(Name alias, Table<LeaseRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public LeasePath as(String alias) {
            return new LeasePath(DSL.name(alias), this);
        }

        @Override
        public LeasePath as(Name alias) {
            return new LeasePath(alias, this);
        }

        @Override
        public LeasePath as(Table<?> alias) {
            return new LeasePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<LeaseRecord, Long> getIdentity() {
        return (Identity<LeaseRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<LeaseRecord> getPrimaryKey() {
        return Keys.LEASE_PKEY;
    }

    @Override
    public List<ForeignKey<LeaseRecord, ?>> getReferences() {
        return Arrays.asList(Keys.LEASE__LEASE_INSTRUMENT_ID_FKEY, Keys.LEASE__LEASE_STUDENT_ID_FKEY, Keys.LEASE__LEASE_RENT_PRICE_ID_FKEY);
    }

    private transient InstrumentPath _instrument;

    /**
     * Get the implicit join path to the <code>public.instrument</code> table.
     */
    public InstrumentPath instrument() {
        if (_instrument == null)
            _instrument = new InstrumentPath(this, Keys.LEASE__LEASE_INSTRUMENT_ID_FKEY, null);

        return _instrument;
    }

    private transient Student.StudentPath _student;

    /**
     * Get the implicit join path to the <code>public.student</code> table.
     */
    public Student.StudentPath student() {
        if (_student == null)
            _student = new Student.StudentPath(this, Keys.LEASE__LEASE_STUDENT_ID_FKEY, null);

        return _student;
    }

    private transient RentPrice.RentPricePath _rentPrice;

    /**
     * Get the implicit join path to the <code>public.rent_price</code> table.
     */
    public RentPrice.RentPricePath rentPrice() {
        if (_rentPrice == null)
            _rentPrice = new RentPrice.RentPricePath(this, Keys.LEASE__LEASE_RENT_PRICE_ID_FKEY, null);

        return _rentPrice;
    }

    @Override
    public Lease as(String alias) {
        return new Lease(DSL.name(alias), this);
    }

    @Override
    public Lease as(Name alias) {
        return new Lease(alias, this);
    }

    @Override
    public Lease as(Table<?> alias) {
        return new Lease(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Lease rename(String name) {
        return new Lease(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Lease rename(Name name) {
        return new Lease(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Lease rename(Table<?> name) {
        return new Lease(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Lease where(Condition condition) {
        return new Lease(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Lease where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Lease where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Lease where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Lease where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Lease where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Lease where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Lease where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Lease whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Lease whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
