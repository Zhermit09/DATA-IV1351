/*
 * This file is generated by jOOQ.
 */
package se.soundgood.storage.jooq.tables;


import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import se.soundgood.storage.jooq.DefaultSchema;
import se.soundgood.storage.jooq.tables.records.MonthlyReportRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MonthlyReport extends TableImpl<MonthlyReportRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>monthly_report</code>
     */
    public static final MonthlyReport MONTHLY_REPORT = new MonthlyReport();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MonthlyReportRecord> getRecordType() {
        return MonthlyReportRecord.class;
    }

    /**
     * The column <code>monthly_report.month</code>.
     */
    public final TableField<MonthlyReportRecord, String> MONTH = createField(DSL.name("month"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>monthly_report.total</code>.
     */
    public final TableField<MonthlyReportRecord, Long> TOTAL = createField(DSL.name("total"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>monthly_report.individual</code>.
     */
    public final TableField<MonthlyReportRecord, Long> INDIVIDUAL = createField(DSL.name("individual"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>monthly_report.Group</code>.
     */
    public final TableField<MonthlyReportRecord, Long> GROUP = createField(DSL.name("Group"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>monthly_report.ensemble</code>.
     */
    public final TableField<MonthlyReportRecord, Long> ENSEMBLE = createField(DSL.name("ensemble"), SQLDataType.BIGINT, this, "");

    private MonthlyReport(Name alias, Table<MonthlyReportRecord> aliased) {
        this(alias, aliased, new Field[] {
            DSL.val(null, SQLDataType.CLOB)
        });
    }

    private MonthlyReport(Name alias, Table<MonthlyReportRecord> aliased, Field<?>[] parameters) {
        this(alias, aliased, parameters, null);
    }

    private MonthlyReport(Name alias, Table<MonthlyReportRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.function(), where);
    }

    /**
     * Create an aliased <code>monthly_report</code> table reference
     */
    public MonthlyReport(String alias) {
        this(DSL.name(alias), MONTHLY_REPORT);
    }

    /**
     * Create an aliased <code>monthly_report</code> table reference
     */
    public MonthlyReport(Name alias) {
        this(alias, MONTHLY_REPORT);
    }

    /**
     * Create a <code>monthly_report</code> table reference
     */
    public MonthlyReport() {
        this(DSL.name("monthly_report"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public MonthlyReport as(String alias) {
        return new MonthlyReport(DSL.name(alias), this, parameters);
    }

    @Override
    public MonthlyReport as(Name alias) {
        return new MonthlyReport(alias, this, parameters);
    }

    @Override
    public MonthlyReport as(Table<?> alias) {
        return new MonthlyReport(alias.getQualifiedName(), this, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public MonthlyReport rename(String name) {
        return new MonthlyReport(DSL.name(name), null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public MonthlyReport rename(Name name) {
        return new MonthlyReport(name, null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public MonthlyReport rename(Table<?> name) {
        return new MonthlyReport(name.getQualifiedName(), null, parameters);
    }

    /**
     * Call this table-valued function
     */
    public MonthlyReport call(
          String _Year
    ) {
        MonthlyReport result = new MonthlyReport(DSL.name("monthly_report"), null, new Field[] {
            DSL.val(_Year, SQLDataType.CLOB)
        });

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }

    /**
     * Call this table-valued function
     */
    public MonthlyReport call(
          Field<String> _Year
    ) {
        MonthlyReport result = new MonthlyReport(DSL.name("monthly_report"), null, new Field[] {
            _Year
        });

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }
}
