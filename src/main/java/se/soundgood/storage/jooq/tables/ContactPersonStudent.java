/*
 * This file is generated by jOOQ.
 */
package se.soundgood.storage.jooq.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import se.soundgood.storage.jooq.DefaultSchema;
import se.soundgood.storage.jooq.Keys;
import se.soundgood.storage.jooq.tables.Person.PersonPath;
import se.soundgood.storage.jooq.tables.Student.StudentPath;
import se.soundgood.storage.jooq.tables.records.ContactPersonStudentRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ContactPersonStudent extends TableImpl<ContactPersonStudentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>contact_person_student</code>
     */
    public static final ContactPersonStudent CONTACT_PERSON_STUDENT = new ContactPersonStudent();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ContactPersonStudentRecord> getRecordType() {
        return ContactPersonStudentRecord.class;
    }

    /**
     * The column <code>contact_person_student.student_id</code>.
     */
    public final TableField<ContactPersonStudentRecord, Long> STUDENT_ID = createField(DSL.name("student_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>contact_person_student.contact_person_id</code>.
     */
    public final TableField<ContactPersonStudentRecord, Long> CONTACT_PERSON_ID = createField(DSL.name("contact_person_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private ContactPersonStudent(Name alias, Table<ContactPersonStudentRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ContactPersonStudent(Name alias, Table<ContactPersonStudentRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>contact_person_student</code> table reference
     */
    public ContactPersonStudent(String alias) {
        this(DSL.name(alias), CONTACT_PERSON_STUDENT);
    }

    /**
     * Create an aliased <code>contact_person_student</code> table reference
     */
    public ContactPersonStudent(Name alias) {
        this(alias, CONTACT_PERSON_STUDENT);
    }

    /**
     * Create a <code>contact_person_student</code> table reference
     */
    public ContactPersonStudent() {
        this(DSL.name("contact_person_student"), null);
    }

    public <O extends Record> ContactPersonStudent(Table<O> path, ForeignKey<O, ContactPersonStudentRecord> childPath, InverseForeignKey<O, ContactPersonStudentRecord> parentPath) {
        super(path, childPath, parentPath, CONTACT_PERSON_STUDENT);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ContactPersonStudentPath extends ContactPersonStudent implements Path<ContactPersonStudentRecord> {
        public <O extends Record> ContactPersonStudentPath(Table<O> path, ForeignKey<O, ContactPersonStudentRecord> childPath, InverseForeignKey<O, ContactPersonStudentRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ContactPersonStudentPath(Name alias, Table<ContactPersonStudentRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ContactPersonStudentPath as(String alias) {
            return new ContactPersonStudentPath(DSL.name(alias), this);
        }

        @Override
        public ContactPersonStudentPath as(Name alias) {
            return new ContactPersonStudentPath(alias, this);
        }

        @Override
        public ContactPersonStudentPath as(Table<?> alias) {
            return new ContactPersonStudentPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<ContactPersonStudentRecord> getPrimaryKey() {
        return Keys.CONTACT_PERSON_STUDENT_PKEY;
    }

    @Override
    public List<ForeignKey<ContactPersonStudentRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CONTACT_PERSON_STUDENT__CONTACT_PERSON_STUDENT_STUDENT_ID_FKEY, Keys.CONTACT_PERSON_STUDENT__CONTACT_PERSON_STUDENT_CONTACT_PERSON_ID_FKEY);
    }

    private transient StudentPath _student;

    /**
     * Get the implicit join path to the <code>public.student</code> table.
     */
    public StudentPath student() {
        if (_student == null)
            _student = new StudentPath(this, Keys.CONTACT_PERSON_STUDENT__CONTACT_PERSON_STUDENT_STUDENT_ID_FKEY, null);

        return _student;
    }

    private transient PersonPath _person;

    /**
     * Get the implicit join path to the <code>public.person</code> table.
     */
    public PersonPath person() {
        if (_person == null)
            _person = new PersonPath(this, Keys.CONTACT_PERSON_STUDENT__CONTACT_PERSON_STUDENT_CONTACT_PERSON_ID_FKEY, null);

        return _person;
    }

    @Override
    public ContactPersonStudent as(String alias) {
        return new ContactPersonStudent(DSL.name(alias), this);
    }

    @Override
    public ContactPersonStudent as(Name alias) {
        return new ContactPersonStudent(alias, this);
    }

    @Override
    public ContactPersonStudent as(Table<?> alias) {
        return new ContactPersonStudent(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ContactPersonStudent rename(String name) {
        return new ContactPersonStudent(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ContactPersonStudent rename(Name name) {
        return new ContactPersonStudent(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ContactPersonStudent rename(Table<?> name) {
        return new ContactPersonStudent(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ContactPersonStudent where(Condition condition) {
        return new ContactPersonStudent(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ContactPersonStudent where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ContactPersonStudent where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ContactPersonStudent where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ContactPersonStudent where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ContactPersonStudent where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ContactPersonStudent where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ContactPersonStudent where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ContactPersonStudent whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ContactPersonStudent whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
