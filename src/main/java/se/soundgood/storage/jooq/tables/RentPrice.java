/*
 * This file is generated by jOOQ.
 */
package se.soundgood.storage.jooq.tables;


import java.time.LocalDate;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import se.soundgood.storage.jooq.DefaultSchema;
import se.soundgood.storage.jooq.Keys;
import se.soundgood.storage.jooq.tables.Instrument.InstrumentPath;
import se.soundgood.storage.jooq.tables.Lease.LeasePath;
import se.soundgood.storage.jooq.tables.records.RentPriceRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RentPrice extends TableImpl<RentPriceRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>rent_price</code>
     */
    public static final RentPrice RENT_PRICE = new RentPrice();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RentPriceRecord> getRecordType() {
        return RentPriceRecord.class;
    }

    /**
     * The column <code>rent_price.rent_price_id</code>.
     */
    public final TableField<RentPriceRecord, Long> RENT_PRICE_ID = createField(DSL.name("rent_price_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>rent_price.price</code>.
     */
    public final TableField<RentPriceRecord, Integer> PRICE = createField(DSL.name("price"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>rent_price.from_date</code>.
     */
    public final TableField<RentPriceRecord, LocalDate> FROM_DATE = createField(DSL.name("from_date"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>rent_price.to_date</code>.
     */
    public final TableField<RentPriceRecord, LocalDate> TO_DATE = createField(DSL.name("to_date"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>rent_price.instrument_id</code>.
     */
    public final TableField<RentPriceRecord, Long> INSTRUMENT_ID = createField(DSL.name("instrument_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private RentPrice(Name alias, Table<RentPriceRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private RentPrice(Name alias, Table<RentPriceRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>rent_price</code> table reference
     */
    public RentPrice(String alias) {
        this(DSL.name(alias), RENT_PRICE);
    }

    /**
     * Create an aliased <code>rent_price</code> table reference
     */
    public RentPrice(Name alias) {
        this(alias, RENT_PRICE);
    }

    /**
     * Create a <code>rent_price</code> table reference
     */
    public RentPrice() {
        this(DSL.name("rent_price"), null);
    }

    public <O extends Record> RentPrice(Table<O> path, ForeignKey<O, RentPriceRecord> childPath, InverseForeignKey<O, RentPriceRecord> parentPath) {
        super(path, childPath, parentPath, RENT_PRICE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class RentPricePath extends RentPrice implements Path<RentPriceRecord> {
        public <O extends Record> RentPricePath(Table<O> path, ForeignKey<O, RentPriceRecord> childPath, InverseForeignKey<O, RentPriceRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private RentPricePath(Name alias, Table<RentPriceRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public RentPricePath as(String alias) {
            return new RentPricePath(DSL.name(alias), this);
        }

        @Override
        public RentPricePath as(Name alias) {
            return new RentPricePath(alias, this);
        }

        @Override
        public RentPricePath as(Table<?> alias) {
            return new RentPricePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<RentPriceRecord, Long> getIdentity() {
        return (Identity<RentPriceRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<RentPriceRecord> getPrimaryKey() {
        return Keys.RENT_PRICE_PKEY;
    }

    @Override
    public List<ForeignKey<RentPriceRecord, ?>> getReferences() {
        return Arrays.asList(Keys.RENT_PRICE__RENT_PRICE_INSTRUMENT_ID_FKEY);
    }

    private transient InstrumentPath _instrument;

    /**
     * Get the implicit join path to the <code>public.instrument</code> table.
     */
    public InstrumentPath instrument() {
        if (_instrument == null)
            _instrument = new InstrumentPath(this, Keys.RENT_PRICE__RENT_PRICE_INSTRUMENT_ID_FKEY, null);

        return _instrument;
    }

    private transient LeasePath _lease;

    /**
     * Get the implicit to-many join path to the <code>public.lease</code> table
     */
    public LeasePath lease() {
        if (_lease == null)
            _lease = new LeasePath(this, null, Keys.LEASE__LEASE_RENT_PRICE_ID_FKEY.getInverseKey());

        return _lease;
    }

    @Override
    public RentPrice as(String alias) {
        return new RentPrice(DSL.name(alias), this);
    }

    @Override
    public RentPrice as(Name alias) {
        return new RentPrice(alias, this);
    }

    @Override
    public RentPrice as(Table<?> alias) {
        return new RentPrice(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public RentPrice rename(String name) {
        return new RentPrice(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RentPrice rename(Name name) {
        return new RentPrice(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public RentPrice rename(Table<?> name) {
        return new RentPrice(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RentPrice where(Condition condition) {
        return new RentPrice(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RentPrice where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RentPrice where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RentPrice where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public RentPrice where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public RentPrice where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public RentPrice where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public RentPrice where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RentPrice whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RentPrice whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
