/*
 * This file is generated by jOOQ.
 */
package se.soundgood.storage.jooq.tables;


import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import se.soundgood.storage.jooq.DefaultSchema;
import se.soundgood.storage.jooq.enums.Instype;
import se.soundgood.storage.jooq.tables.records.AvailableInstrumentRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AvailableInstrument extends TableImpl<AvailableInstrumentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>available_instrument</code>
     */
    public static final AvailableInstrument AVAILABLE_INSTRUMENT = new AvailableInstrument();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AvailableInstrumentRecord> getRecordType() {
        return AvailableInstrumentRecord.class;
    }

    /**
     * The column <code>available_instrument.instrument_id</code>.
     */
    public final TableField<AvailableInstrumentRecord, Long> INSTRUMENT_ID = createField(DSL.name("instrument_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>available_instrument.type</code>.
     */
    public final TableField<AvailableInstrumentRecord, Instype> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR.asEnumDataType(Instype.class), this, "");

    /**
     * The column <code>available_instrument.brand</code>.
     */
    public final TableField<AvailableInstrumentRecord, String> BRAND = createField(DSL.name("brand"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>available_instrument.description</code>.
     */
    public final TableField<AvailableInstrumentRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>available_instrument.price</code>.
     */
    public final TableField<AvailableInstrumentRecord, Integer> PRICE = createField(DSL.name("price"), SQLDataType.INTEGER, this, "");

    private AvailableInstrument(Name alias, Table<AvailableInstrumentRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private AvailableInstrument(Name alias, Table<AvailableInstrumentRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("""
        create view "available_instrument" as  SELECT instrument.instrument_id,
          instrument_specification.type,
          instrument_specification.brand,
          instrument.description,
          rent_price.price
         FROM ((instrument
           JOIN rent_price ON ((instrument.instrument_id = rent_price.instrument_id)))
           JOIN instrument_specification ON ((instrument.instrument_specification_id = instrument_specification.instrument_specification_id)))
        WHERE ((rent_price.from_date <= CURRENT_DATE) AND (CURRENT_DATE <= COALESCE(rent_price.to_date, CURRENT_DATE)) AND (NOT (EXISTS ( SELECT 1
                 FROM lease
                WHERE ((lease.rent_date <= CURRENT_DATE) AND (CURRENT_DATE <= lease.return_date) AND (lease.instrument_id = instrument.instrument_id))))))
        ORDER BY instrument.instrument_id;
        """), where);
    }

    /**
     * Create an aliased <code>available_instrument</code> table reference
     */
    public AvailableInstrument(String alias) {
        this(DSL.name(alias), AVAILABLE_INSTRUMENT);
    }

    /**
     * Create an aliased <code>available_instrument</code> table reference
     */
    public AvailableInstrument(Name alias) {
        this(alias, AVAILABLE_INSTRUMENT);
    }

    /**
     * Create a <code>available_instrument</code> table reference
     */
    public AvailableInstrument() {
        this(DSL.name("available_instrument"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public AvailableInstrument as(String alias) {
        return new AvailableInstrument(DSL.name(alias), this);
    }

    @Override
    public AvailableInstrument as(Name alias) {
        return new AvailableInstrument(alias, this);
    }

    @Override
    public AvailableInstrument as(Table<?> alias) {
        return new AvailableInstrument(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public AvailableInstrument rename(String name) {
        return new AvailableInstrument(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AvailableInstrument rename(Name name) {
        return new AvailableInstrument(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public AvailableInstrument rename(Table<?> name) {
        return new AvailableInstrument(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AvailableInstrument where(Condition condition) {
        return new AvailableInstrument(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AvailableInstrument where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AvailableInstrument where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AvailableInstrument where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AvailableInstrument where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AvailableInstrument where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AvailableInstrument where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AvailableInstrument where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AvailableInstrument whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AvailableInstrument whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
