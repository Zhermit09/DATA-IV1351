/*
 * This file is generated by jOOQ.
 */
package se.soundgood.storage.jooq.tables;


import java.time.LocalDate;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import se.soundgood.storage.jooq.DefaultSchema;
import se.soundgood.storage.jooq.enums.Mgenre;
import se.soundgood.storage.jooq.tables.records.NextWeekEnsembleRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class NextWeekEnsemble extends TableImpl<NextWeekEnsembleRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>next_week_ensemble</code>
     */
    public static final NextWeekEnsemble NEXT_WEEK_ENSEMBLE = new NextWeekEnsemble();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NextWeekEnsembleRecord> getRecordType() {
        return NextWeekEnsembleRecord.class;
    }

    /**
     * The column <code>next_week_ensemble.Day</code>.
     */
    public final TableField<NextWeekEnsembleRecord, String> DAY = createField(DSL.name("Day"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>next_week_ensemble.Genre</code>.
     */
    public final TableField<NextWeekEnsembleRecord, Mgenre> GENRE = createField(DSL.name("Genre"), SQLDataType.VARCHAR.asEnumDataType(Mgenre.class), this, "");

    /**
     * The column <code>next_week_ensemble.No of Free Seats</code>.
     */
    public final TableField<NextWeekEnsembleRecord, String> NO_OF_FREE_SEATS = createField(DSL.name("No of Free Seats"), SQLDataType.CLOB, this, "");

    private NextWeekEnsemble(Name alias, Table<NextWeekEnsembleRecord> aliased) {
        this(alias, aliased, new Field[] {
            DSL.val(null, SQLDataType.LOCALDATE)
        });
    }

    private NextWeekEnsemble(Name alias, Table<NextWeekEnsembleRecord> aliased, Field<?>[] parameters) {
        this(alias, aliased, parameters, null);
    }

    private NextWeekEnsemble(Name alias, Table<NextWeekEnsembleRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.function(), where);
    }

    /**
     * Create an aliased <code>next_week_ensemble</code> table reference
     */
    public NextWeekEnsemble(String alias) {
        this(DSL.name(alias), NEXT_WEEK_ENSEMBLE);
    }

    /**
     * Create an aliased <code>next_week_ensemble</code> table reference
     */
    public NextWeekEnsemble(Name alias) {
        this(alias, NEXT_WEEK_ENSEMBLE);
    }

    /**
     * Create a <code>next_week_ensemble</code> table reference
     */
    public NextWeekEnsemble() {
        this(DSL.name("next_week_ensemble"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public NextWeekEnsemble as(String alias) {
        return new NextWeekEnsemble(DSL.name(alias), this, parameters);
    }

    @Override
    public NextWeekEnsemble as(Name alias) {
        return new NextWeekEnsemble(alias, this, parameters);
    }

    @Override
    public NextWeekEnsemble as(Table<?> alias) {
        return new NextWeekEnsemble(alias.getQualifiedName(), this, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public NextWeekEnsemble rename(String name) {
        return new NextWeekEnsemble(DSL.name(name), null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public NextWeekEnsemble rename(Name name) {
        return new NextWeekEnsemble(name, null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public NextWeekEnsemble rename(Table<?> name) {
        return new NextWeekEnsemble(name.getQualifiedName(), null, parameters);
    }

    /**
     * Call this table-valued function
     */
    public NextWeekEnsemble call(
          LocalDate _StartDate
    ) {
        NextWeekEnsemble result = new NextWeekEnsemble(DSL.name("next_week_ensemble"), null, new Field[] {
            DSL.val(_StartDate, SQLDataType.LOCALDATE)
        });

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }

    /**
     * Call this table-valued function
     */
    public NextWeekEnsemble call(
          Field<LocalDate> _StartDate
    ) {
        NextWeekEnsemble result = new NextWeekEnsemble(DSL.name("next_week_ensemble"), null, new Field[] {
            _StartDate
        });

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }
}
