/*
 * This file is generated by jOOQ.
 */
package se.soundgood.storage.jooq.tables;


import java.time.LocalDate;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import se.soundgood.storage.jooq.DefaultSchema;
import se.soundgood.storage.jooq.tables.records.InstructorReportRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class InstructorReport extends TableImpl<InstructorReportRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>instructor_report</code>
     */
    public static final InstructorReport INSTRUCTOR_REPORT = new InstructorReport();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<InstructorReportRecord> getRecordType() {
        return InstructorReportRecord.class;
    }

    /**
     * The column <code>instructor_report.Instructor ID</code>.
     */
    public final TableField<InstructorReportRecord, Long> INSTRUCTOR_ID = createField(DSL.name("Instructor ID"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>instructor_report.First Name</code>.
     */
    public final TableField<InstructorReportRecord, String> FIRST_NAME = createField(DSL.name("First Name"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>instructor_report.Last Name</code>.
     */
    public final TableField<InstructorReportRecord, String> LAST_NAME = createField(DSL.name("Last Name"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>instructor_report.Lesson Count</code>.
     */
    public final TableField<InstructorReportRecord, Long> LESSON_COUNT = createField(DSL.name("Lesson Count"), SQLDataType.BIGINT, this, "");

    private InstructorReport(Name alias, Table<InstructorReportRecord> aliased) {
        this(alias, aliased, new Field[] {
            DSL.val(null, SQLDataType.INTEGER),
            DSL.val(null, SQLDataType.LOCALDATE)
        });
    }

    private InstructorReport(Name alias, Table<InstructorReportRecord> aliased, Field<?>[] parameters) {
        this(alias, aliased, parameters, null);
    }

    private InstructorReport(Name alias, Table<InstructorReportRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.function(), where);
    }

    /**
     * Create an aliased <code>instructor_report</code> table reference
     */
    public InstructorReport(String alias) {
        this(DSL.name(alias), INSTRUCTOR_REPORT);
    }

    /**
     * Create an aliased <code>instructor_report</code> table reference
     */
    public InstructorReport(Name alias) {
        this(alias, INSTRUCTOR_REPORT);
    }

    /**
     * Create a <code>instructor_report</code> table reference
     */
    public InstructorReport() {
        this(DSL.name("instructor_report"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public InstructorReport as(String alias) {
        return new InstructorReport(DSL.name(alias), this, parameters);
    }

    @Override
    public InstructorReport as(Name alias) {
        return new InstructorReport(alias, this, parameters);
    }

    @Override
    public InstructorReport as(Table<?> alias) {
        return new InstructorReport(alias.getQualifiedName(), this, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public InstructorReport rename(String name) {
        return new InstructorReport(DSL.name(name), null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public InstructorReport rename(Name name) {
        return new InstructorReport(name, null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public InstructorReport rename(Table<?> name) {
        return new InstructorReport(name.getQualifiedName(), null, parameters);
    }

    /**
     * Call this table-valued function
     */
    public InstructorReport call(
          Integer _Num
        , LocalDate _StartDate
    ) {
        InstructorReport result = new InstructorReport(DSL.name("instructor_report"), null, new Field[] {
            DSL.val(_Num, SQLDataType.INTEGER),
            DSL.val(_StartDate, SQLDataType.LOCALDATE)
        });

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }

    /**
     * Call this table-valued function
     */
    public InstructorReport call(
          Field<Integer> _Num
        , Field<LocalDate> _StartDate
    ) {
        InstructorReport result = new InstructorReport(DSL.name("instructor_report"), null, new Field[] {
            _Num,
            _StartDate
        });

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }
}
