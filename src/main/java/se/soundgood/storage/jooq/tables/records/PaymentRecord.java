/*
 * This file is generated by jOOQ.
 */
package se.soundgood.storage.jooq.tables.records;


import java.math.BigDecimal;
import java.time.LocalDate;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;

import se.soundgood.storage.jooq.tables.Payment;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PaymentRecord extends UpdatableRecordImpl<PaymentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>payment.payment_id</code>.
     */
    public PaymentRecord setPaymentId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>payment.payment_id</code>.
     */
    public Long getPaymentId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>payment.payment_description_id</code>.
     */
    public PaymentRecord setPaymentDescriptionId(Long value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>payment.payment_description_id</code>.
     */
    public Long getPaymentDescriptionId() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>payment.from_date</code>.
     */
    public PaymentRecord setFromDate(LocalDate value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>payment.from_date</code>.
     */
    public LocalDate getFromDate() {
        return (LocalDate) get(2);
    }

    /**
     * Setter for <code>payment.to_date</code>.
     */
    public PaymentRecord setToDate(LocalDate value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>payment.to_date</code>.
     */
    public LocalDate getToDate() {
        return (LocalDate) get(3);
    }

    /**
     * Setter for <code>payment.instructor_pay</code>.
     */
    public PaymentRecord setInstructorPay(Integer value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>payment.instructor_pay</code>.
     */
    public Integer getInstructorPay() {
        return (Integer) get(4);
    }

    /**
     * Setter for <code>payment.student_price</code>.
     */
    public PaymentRecord setStudentPrice(Integer value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>payment.student_price</code>.
     */
    public Integer getStudentPrice() {
        return (Integer) get(5);
    }

    /**
     * Setter for <code>payment.sibling_discount</code>.
     */
    public PaymentRecord setSiblingDiscount(BigDecimal value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>payment.sibling_discount</code>.
     */
    public BigDecimal getSiblingDiscount() {
        return (BigDecimal) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached PaymentRecord
     */
    public PaymentRecord() {
        super(Payment.PAYMENT);
    }

    /**
     * Create a detached, initialised PaymentRecord
     */
    public PaymentRecord(Long paymentId, Long paymentDescriptionId, LocalDate fromDate, LocalDate toDate, Integer instructorPay, Integer studentPrice, BigDecimal siblingDiscount) {
        super(Payment.PAYMENT);

        setPaymentId(paymentId);
        setPaymentDescriptionId(paymentDescriptionId);
        setFromDate(fromDate);
        setToDate(toDate);
        setInstructorPay(instructorPay);
        setStudentPrice(studentPrice);
        setSiblingDiscount(siblingDiscount);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised PaymentRecord
     */
    public PaymentRecord(se.soundgood.storage.jooq.tables.pojos.Payment value) {
        super(Payment.PAYMENT);

        if (value != null) {
            setPaymentId(value.paymentId());
            setPaymentDescriptionId(value.paymentDescriptionId());
            setFromDate(value.fromDate());
            setToDate(value.toDate());
            setInstructorPay(value.instructorPay());
            setStudentPrice(value.studentPrice());
            setSiblingDiscount(value.siblingDiscount());
            resetChangedOnNotNull();
        }
    }
}
