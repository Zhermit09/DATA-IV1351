/*
 * This file is generated by jOOQ.
 */
package se.soundgood.storage.jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.YearToSecond;

import se.soundgood.storage.jooq.DefaultSchema;
import se.soundgood.storage.jooq.Keys;
import se.soundgood.storage.jooq.tables.Instructor.InstructorPath;
import se.soundgood.storage.jooq.tables.Lesson.LessonPath;
import se.soundgood.storage.jooq.tables.Payment.PaymentPath;
import se.soundgood.storage.jooq.tables.Student.StudentPath;
import se.soundgood.storage.jooq.tables.StudentHistory.StudentHistoryPath;
import se.soundgood.storage.jooq.tables.records.TimeSlotRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TimeSlot extends TableImpl<TimeSlotRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>time_slot</code>
     */
    public static final TimeSlot TIME_SLOT = new TimeSlot();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TimeSlotRecord> getRecordType() {
        return TimeSlotRecord.class;
    }

    /**
     * The column <code>time_slot.time_slot_id</code>.
     */
    public final TableField<TimeSlotRecord, Long> TIME_SLOT_ID = createField(DSL.name("time_slot_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>time_slot.date</code>.
     */
    public final TableField<TimeSlotRecord, LocalDateTime> DATE = createField(DSL.name("date"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>time_slot.duration</code>.
     */
    public final TableField<TimeSlotRecord, YearToSecond> DURATION = createField(DSL.name("duration"), SQLDataType.INTERVAL.nullable(false), this, "");

    /**
     * The column <code>time_slot.location</code>.
     */
    public final TableField<TimeSlotRecord, String> LOCATION = createField(DSL.name("location"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>time_slot.lesson_id</code>.
     */
    public final TableField<TimeSlotRecord, Long> LESSON_ID = createField(DSL.name("lesson_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>time_slot.instructor_id</code>.
     */
    public final TableField<TimeSlotRecord, Long> INSTRUCTOR_ID = createField(DSL.name("instructor_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>time_slot.payment_id</code>.
     */
    public final TableField<TimeSlotRecord, Long> PAYMENT_ID = createField(DSL.name("payment_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private TimeSlot(Name alias, Table<TimeSlotRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private TimeSlot(Name alias, Table<TimeSlotRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>time_slot</code> table reference
     */
    public TimeSlot(String alias) {
        this(DSL.name(alias), TIME_SLOT);
    }

    /**
     * Create an aliased <code>time_slot</code> table reference
     */
    public TimeSlot(Name alias) {
        this(alias, TIME_SLOT);
    }

    /**
     * Create a <code>time_slot</code> table reference
     */
    public TimeSlot() {
        this(DSL.name("time_slot"), null);
    }

    public <O extends Record> TimeSlot(Table<O> path, ForeignKey<O, TimeSlotRecord> childPath, InverseForeignKey<O, TimeSlotRecord> parentPath) {
        super(path, childPath, parentPath, TIME_SLOT);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class TimeSlotPath extends TimeSlot implements Path<TimeSlotRecord> {
        public <O extends Record> TimeSlotPath(Table<O> path, ForeignKey<O, TimeSlotRecord> childPath, InverseForeignKey<O, TimeSlotRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private TimeSlotPath(Name alias, Table<TimeSlotRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public TimeSlotPath as(String alias) {
            return new TimeSlotPath(DSL.name(alias), this);
        }

        @Override
        public TimeSlotPath as(Name alias) {
            return new TimeSlotPath(alias, this);
        }

        @Override
        public TimeSlotPath as(Table<?> alias) {
            return new TimeSlotPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<TimeSlotRecord, Long> getIdentity() {
        return (Identity<TimeSlotRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<TimeSlotRecord> getPrimaryKey() {
        return Keys.TIME_SLOT_PKEY;
    }

    @Override
    public List<ForeignKey<TimeSlotRecord, ?>> getReferences() {
        return Arrays.asList(Keys.TIME_SLOT__TIME_SLOT_LESSON_ID_FKEY, Keys.TIME_SLOT__TIME_SLOT_INSTRUCTOR_ID_FKEY, Keys.TIME_SLOT__TIME_SLOT_PAYMENT_ID_FKEY);
    }

    private transient LessonPath _lesson;

    /**
     * Get the implicit join path to the <code>public.lesson</code> table.
     */
    public LessonPath lesson() {
        if (_lesson == null)
            _lesson = new LessonPath(this, Keys.TIME_SLOT__TIME_SLOT_LESSON_ID_FKEY, null);

        return _lesson;
    }

    private transient InstructorPath _instructor;

    /**
     * Get the implicit join path to the <code>public.instructor</code> table.
     */
    public InstructorPath instructor() {
        if (_instructor == null)
            _instructor = new InstructorPath(this, Keys.TIME_SLOT__TIME_SLOT_INSTRUCTOR_ID_FKEY, null);

        return _instructor;
    }

    private transient PaymentPath _payment;

    /**
     * Get the implicit join path to the <code>public.payment</code> table.
     */
    public PaymentPath payment() {
        if (_payment == null)
            _payment = new PaymentPath(this, Keys.TIME_SLOT__TIME_SLOT_PAYMENT_ID_FKEY, null);

        return _payment;
    }

    private transient StudentHistoryPath _studentHistory;

    /**
     * Get the implicit to-many join path to the
     * <code>public.student_history</code> table
     */
    public StudentHistoryPath studentHistory() {
        if (_studentHistory == null)
            _studentHistory = new StudentHistoryPath(this, null, Keys.STUDENT_HISTORY__STUDENT_HISTORY_TIME_SLOT_ID_FKEY.getInverseKey());

        return _studentHistory;
    }

    /**
     * Get the implicit many-to-many join path to the
     * <code>public.student</code> table
     */
    public StudentPath student() {
        return studentHistory().student();
    }

    @Override
    public TimeSlot as(String alias) {
        return new TimeSlot(DSL.name(alias), this);
    }

    @Override
    public TimeSlot as(Name alias) {
        return new TimeSlot(alias, this);
    }

    @Override
    public TimeSlot as(Table<?> alias) {
        return new TimeSlot(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TimeSlot rename(String name) {
        return new TimeSlot(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TimeSlot rename(Name name) {
        return new TimeSlot(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TimeSlot rename(Table<?> name) {
        return new TimeSlot(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TimeSlot where(Condition condition) {
        return new TimeSlot(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TimeSlot where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TimeSlot where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TimeSlot where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TimeSlot where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TimeSlot where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TimeSlot where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TimeSlot where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TimeSlot whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TimeSlot whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
